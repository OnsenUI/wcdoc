'use strict';

var _TagDict = require('./TagDict');

var _TagDict2 = _interopRequireDefault(_TagDict);

var _powerAssert = require('power-assert');

var _powerAssert2 = _interopRequireDefault(_powerAssert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('TagDict', function () {
  it('should work normally', function () {
    _powerAssert2.default.ok(_TagDict2.default.parse);

    var location = { start: { line: 2, column: 4 }, end: { line: 4, column: 7 } };

    _powerAssert2.default.ok(_TagDict2.default.parse({ value: 'aaa', location: location }));
    _powerAssert2.default.ok(_TagDict2.default.parse({ value: '@param {Object} hoge', location: location }).get('param'));
    _powerAssert2.default.equal(_TagDict2.default.parse({ value: 'description', location: location }).get('description'), 'description');
    _powerAssert2.default.ok(_TagDict2.default.parse({ value: '@param hoge', location: location }).get('foobar', true));
    _powerAssert2.default.ok(_TagDict2.default.parse({ value: '@param hoge', location: location }).has('param'));
    _powerAssert2.default.ok(!_TagDict2.default.parse({ value: '@param hoge', location: location }).has('foobar'));
    _powerAssert2.default.equal(_TagDict2.default.parse({ value: 'hoge', location: location }).get('description'), 'hoge');
    _powerAssert2.default.equal(_TagDict2.default.parse({ value: 'hoge\n@description foobar', location: location }).get('description'), 'foobar');
    _powerAssert2.default.equal(_TagDict2.default.parse({ value: '@description foobar', location: location }).get('description'), 'foobar');
    _powerAssert2.default.equal(_TagDict2.default.parse({ value: '@description foo\nbar', location: location }).get('description'), 'foo\nbar');
    _powerAssert2.default.equal(_TagDict2.default.parse({ value: '@constructor foo', location: location }).get('constructor'), 'foo');

    _powerAssert2.default.equal(_TagDict2.default.parse({
      value: '@example \n        @Component({}) class Hoge {}',
      location: location
    }).get('example'), '@Component({}) class Hoge {}');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9UYWdEaWN0LnNwZWMuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsIm9rIiwicGFyc2UiLCJsb2NhdGlvbiIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsInZhbHVlIiwiZ2V0IiwiZXF1YWwiLCJoYXMiXSwibWFwcGluZ3MiOiI7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUFBLFNBQVMsU0FBVCxFQUFvQixZQUFNO0FBQ3hCQyxLQUFHLHNCQUFILEVBQTJCLFlBQU07QUFDL0IsMEJBQU9DLEVBQVAsQ0FBVSxrQkFBUUMsS0FBbEI7O0FBRUEsUUFBTUMsV0FBVyxFQUFDQyxPQUFPLEVBQUNDLE1BQU0sQ0FBUCxFQUFVQyxRQUFRLENBQWxCLEVBQVIsRUFBOEJDLEtBQUssRUFBQ0YsTUFBTSxDQUFQLEVBQVVDLFFBQVEsQ0FBbEIsRUFBbkMsRUFBakI7O0FBRUEsMEJBQU9MLEVBQVAsQ0FBVSxrQkFBUUMsS0FBUixDQUFjLEVBQUNNLFlBQUQsRUFBZUwsVUFBVUEsUUFBekIsRUFBZCxDQUFWO0FBQ0EsMEJBQU9GLEVBQVAsQ0FBVSxrQkFBUUMsS0FBUixDQUFjLEVBQUNNLDZCQUFELEVBQWdDTCxVQUFVQSxRQUExQyxFQUFkLEVBQW1FTSxHQUFuRSxDQUF1RSxPQUF2RSxDQUFWO0FBQ0EsMEJBQU9DLEtBQVAsQ0FBYSxrQkFBUVIsS0FBUixDQUFjLEVBQUNNLG9CQUFELEVBQXVCTCxVQUFVQSxRQUFqQyxFQUFkLEVBQTBETSxHQUExRCxDQUE4RCxhQUE5RCxDQUFiLEVBQTJGLGFBQTNGO0FBQ0EsMEJBQU9SLEVBQVAsQ0FBVSxrQkFBUUMsS0FBUixDQUFjLEVBQUNNLG9CQUFELEVBQXVCTCxVQUFVQSxRQUFqQyxFQUFkLEVBQTBETSxHQUExRCxDQUE4RCxRQUE5RCxFQUF3RSxJQUF4RSxDQUFWO0FBQ0EsMEJBQU9SLEVBQVAsQ0FBVSxrQkFBUUMsS0FBUixDQUFjLEVBQUNNLG9CQUFELEVBQXVCTCxVQUFVQSxRQUFqQyxFQUFkLEVBQTBEUSxHQUExRCxDQUE4RCxPQUE5RCxDQUFWO0FBQ0EsMEJBQU9WLEVBQVAsQ0FBVSxDQUFDLGtCQUFRQyxLQUFSLENBQWMsRUFBQ00sb0JBQUQsRUFBdUJMLFVBQVVBLFFBQWpDLEVBQWQsRUFBMERRLEdBQTFELENBQThELFFBQTlELENBQVg7QUFDQSwwQkFBT0QsS0FBUCxDQUFhLGtCQUFRUixLQUFSLENBQWMsRUFBQ00sYUFBRCxFQUFnQkwsVUFBVUEsUUFBMUIsRUFBZCxFQUFtRE0sR0FBbkQsQ0FBdUQsYUFBdkQsQ0FBYixFQUFvRixNQUFwRjtBQUNBLDBCQUFPQyxLQUFQLENBQWEsa0JBQVFSLEtBQVIsQ0FBYyxFQUFDTSxrQ0FBRCxFQUFxQ0wsVUFBVUEsUUFBL0MsRUFBZCxFQUF3RU0sR0FBeEUsQ0FBNEUsYUFBNUUsQ0FBYixFQUF5RyxRQUF6RztBQUNBLDBCQUFPQyxLQUFQLENBQWEsa0JBQVFSLEtBQVIsQ0FBYyxFQUFDTSw0QkFBRCxFQUErQkwsVUFBVUEsUUFBekMsRUFBZCxFQUFrRU0sR0FBbEUsQ0FBc0UsYUFBdEUsQ0FBYixFQUFtRyxRQUFuRztBQUNBLDBCQUFPQyxLQUFQLENBQWEsa0JBQVFSLEtBQVIsQ0FBYyxFQUFDTSw4QkFBRCxFQUFpQ0wsVUFBVUEsUUFBM0MsRUFBZCxFQUFvRU0sR0FBcEUsQ0FBd0UsYUFBeEUsQ0FBYixFQUFxRyxVQUFyRztBQUNBLDBCQUFPQyxLQUFQLENBQWEsa0JBQVFSLEtBQVIsQ0FBYyxFQUFDTSx5QkFBRCxFQUE0QkwsVUFBVUEsUUFBdEMsRUFBZCxFQUErRE0sR0FBL0QsQ0FBbUUsYUFBbkUsQ0FBYixFQUFnRyxLQUFoRzs7QUFFQSwwQkFBT0MsS0FBUCxDQUFhLGtCQUFRUixLQUFSLENBQWM7QUFDekJNLDhEQUR5QjtBQUd6QkwsZ0JBQVVBO0FBSGUsS0FBZCxFQUlWTSxHQUpVLENBSU4sU0FKTSxDQUFiO0FBS0QsR0F0QkQ7QUF3QkQsQ0F6QkQiLCJmaWxlIjoiVGFnRGljdC5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgVGFnRGljdCBmcm9tICcuL1RhZ0RpY3QnO1xuaW1wb3J0IGFzc2VydCBmcm9tICdwb3dlci1hc3NlcnQnO1xuXG5kZXNjcmliZSgnVGFnRGljdCcsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCB3b3JrIG5vcm1hbGx5JywgKCkgPT4ge1xuICAgIGFzc2VydC5vayhUYWdEaWN0LnBhcnNlKTtcblxuICAgIGNvbnN0IGxvY2F0aW9uID0ge3N0YXJ0OiB7bGluZTogMiwgY29sdW1uOiA0fSwgZW5kOiB7bGluZTogNCwgY29sdW1uOiA3fX07XG5cbiAgICBhc3NlcnQub2soVGFnRGljdC5wYXJzZSh7dmFsdWU6IGBhYWFgLCBsb2NhdGlvbjogbG9jYXRpb259KSk7XG4gICAgYXNzZXJ0Lm9rKFRhZ0RpY3QucGFyc2Uoe3ZhbHVlOiBgQHBhcmFtIHtPYmplY3R9IGhvZ2VgLCBsb2NhdGlvbjogbG9jYXRpb259KS5nZXQoJ3BhcmFtJykpO1xuICAgIGFzc2VydC5lcXVhbChUYWdEaWN0LnBhcnNlKHt2YWx1ZTogYGRlc2NyaXB0aW9uYCwgbG9jYXRpb246IGxvY2F0aW9ufSkuZ2V0KCdkZXNjcmlwdGlvbicpLCAnZGVzY3JpcHRpb24nKTtcbiAgICBhc3NlcnQub2soVGFnRGljdC5wYXJzZSh7dmFsdWU6IGBAcGFyYW0gaG9nZWAsIGxvY2F0aW9uOiBsb2NhdGlvbn0pLmdldCgnZm9vYmFyJywgdHJ1ZSkpO1xuICAgIGFzc2VydC5vayhUYWdEaWN0LnBhcnNlKHt2YWx1ZTogYEBwYXJhbSBob2dlYCwgbG9jYXRpb246IGxvY2F0aW9ufSkuaGFzKCdwYXJhbScpKTtcbiAgICBhc3NlcnQub2soIVRhZ0RpY3QucGFyc2Uoe3ZhbHVlOiBgQHBhcmFtIGhvZ2VgLCBsb2NhdGlvbjogbG9jYXRpb259KS5oYXMoJ2Zvb2JhcicpKTtcbiAgICBhc3NlcnQuZXF1YWwoVGFnRGljdC5wYXJzZSh7dmFsdWU6IGBob2dlYCwgbG9jYXRpb246IGxvY2F0aW9ufSkuZ2V0KCdkZXNjcmlwdGlvbicpLCAnaG9nZScpO1xuICAgIGFzc2VydC5lcXVhbChUYWdEaWN0LnBhcnNlKHt2YWx1ZTogYGhvZ2VcXG5AZGVzY3JpcHRpb24gZm9vYmFyYCwgbG9jYXRpb246IGxvY2F0aW9ufSkuZ2V0KCdkZXNjcmlwdGlvbicpLCAnZm9vYmFyJyk7XG4gICAgYXNzZXJ0LmVxdWFsKFRhZ0RpY3QucGFyc2Uoe3ZhbHVlOiBgQGRlc2NyaXB0aW9uIGZvb2JhcmAsIGxvY2F0aW9uOiBsb2NhdGlvbn0pLmdldCgnZGVzY3JpcHRpb24nKSwgJ2Zvb2JhcicpO1xuICAgIGFzc2VydC5lcXVhbChUYWdEaWN0LnBhcnNlKHt2YWx1ZTogYEBkZXNjcmlwdGlvbiBmb29cXG5iYXJgLCBsb2NhdGlvbjogbG9jYXRpb259KS5nZXQoJ2Rlc2NyaXB0aW9uJyksICdmb29cXG5iYXInKTtcbiAgICBhc3NlcnQuZXF1YWwoVGFnRGljdC5wYXJzZSh7dmFsdWU6IGBAY29uc3RydWN0b3IgZm9vYCwgbG9jYXRpb246IGxvY2F0aW9ufSkuZ2V0KCdjb25zdHJ1Y3RvcicpLCAnZm9vJyk7XG5cbiAgICBhc3NlcnQuZXF1YWwoVGFnRGljdC5wYXJzZSh7XG4gICAgICB2YWx1ZTogYEBleGFtcGxlIFxuICAgICAgICBAQ29tcG9uZW50KHt9KSBjbGFzcyBIb2dlIHt9YCxcbiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgIH0pLmdldCgnZXhhbXBsZScpLCBgQENvbXBvbmVudCh7fSkgY2xhc3MgSG9nZSB7fWApO1xuICB9KTtcblxufSk7XG5cbiJdfQ==